<?php




function amana_common_hooks_form_news_node_form_alter(&$form, &$form_state) {

    unset($form['title']);
    unset($form['buttons']['delete']);
    unset($form['buttons']['preview']);

}


function amana_common_hooks_form_alter(&$form, $form_state, $form_id){
  switch ($form_id) {
    case 'expert_node_form':
      
      $form['body_field']['body']['#required'] = TRUE;
      //$form['body_field']['format']['format']['guidelines'] = array();
      //$form['body_field']['format'][2] = array();
      break;
    case 'demo_product_node_form':
      if($form['buttons']['delete']){
        if($form['#node']->nid){
          $count_result = db_fetch_object(db_query('select count(*) as count from {content_type_hotspot} where field_hotspot_product_value='.$form['#node']->nid));
          if($count_result->count>0){
            $form['buttons']['delete_description']['#value'] = t('<span id="delete_description">Product can\'t be deleted becuase some hotspots are related to it.</span>');
            $form['buttons']['delete_description']['#weight'] = 20;
            $form['buttons']['delete']['#disabled'] = TRUE;
          }
        }
      }
      $form['body_field']['body']['#required'] = TRUE;
      break;
    case 'product_categories_node_form':
      if($form['buttons']['delete']){
        if($form['#node']->nid){
          $count_result = db_fetch_object(db_query('select count(*) as count from {content_type_product} where field_product_categories_value='.$form['#node']->nid));
          if($count_result->count>0){
            $form['buttons']['delete_description']['#value'] = t('<span id="delete_description">Category can\'t be deleted becuase some products are related to it.</span>');
            $form['buttons']['delete_description']['#weight'] = 20;
            $form['buttons']['delete']['#disabled'] = TRUE;
          }
        }
      }
    break;
    case 'hotspot_node_form':
      //$form['body_field']['format'] = array();
      $pid=0;

      if($form['#node']->field_hotspot_product[0][value]){
        $pid = $form['#node']->field_hotspot_product[0][value];
      }
      else{
        $result = db_query('select nid,title from node where type="product"');
        while($product = db_fetch_object($result)){
          $pid = $product->nid;
          break;
        }
      }
      
      
      $form['#field_info']['field_hotspot_product_view']['allowed_values_php'] = '$products = array();
$result = db_query(\'select nid,field_product_view1_name_value,field_product_view2_name_value from {content_type_product} where nid='.$pid.'\');
while($product = db_fetch_object($result)){
  $products["view1"] = $product->field_product_view1_name_value;
  $products["view2"] = $product->field_product_view2_name_value;
}
return $products;';

      
      $form['body_field']['body']['#required'] = TRUE;

      //////////// Handling reusing existing information cases ///////////////////////
      if (arg(1) == 'add') {
        $ru = intval($_GET['ru']);
        if ($ru == 1) {
          $form['#field_info']['field_existing_hotspots']['allowed_values_php'] = '
              $hotspots = array();
              $result = db_query(\'select n.nid as id,n.title as name from {content_type_hotspot} cth inner join {node} n on cth.nid=n.nid \');
              while($hotspot = db_fetch_object($result)){
                $hotspots[$hotspot->id] = $hotspot->name;
              }
              return $hotspots;';
          $form['field_resuse_existing_hotspot']['#default_value'][0][value] = 'Yes';
          $form['title']['#required'] = FALSE;
          $form['field_hotspot_media_dropdown']['#required'] = FALSE;
          $form['body_field']['body']['#required'] = FALSE;
          $form['field_related_product_url'][0]['#required'] = FALSE;
          $form['field_email_subject'][0]['#required'] = FALSE;
          $form['field_sms_email_body'][0]['#required'] = FALSE;
        }
        else{
          $form['field_resuse_existing_hotspot']['#default_value'][0][value] = 'No';
          $form['field_existing_products']['#required'] = FALSE;
          $form['field_existing_hotspots']['#required'] = FALSE;
          $form['field_hotspot_product'];
          $form['field_hotspot_product_view'];
          $form['field_resuse_existing_hotspot'];
          $form['field_existing_hotspots'];
          
          $form['field_hotspot_media_url'];
        }
        
      }
      else if (arg(2) == 'edit') {
        $form['field_resuse_existing_hotspot']['#required'] = FALSE;
        $form['field_existing_products']['#required'] = FALSE;
        $form['field_existing_hotspots']['#required'] = FALSE;
      }
    break;
    
    default:
      break;
  }
}

function amana_common_hooks_menu(){
  $menus = array();
   
  
  return $menus;
}

function amana_common_hooks_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  switch ($op) {
    case 'validate':      
      /*if($node->op=='Delete'){
        if($node->type=='product_categories'){
          $count_result = db_fetch_object(db_query('select count(*) as count from {content_type_product} where field_product_categories_value='.$node->nid));
          if($count_result->count>0){            
            form_set_error('',t('Category can\'t be deleted becuase some products are related to it.'));
          }
        }
      }*/
      if($node->type=='product_categories'){
        $nodes = db_query('select nid from {node} where type="product_categories" and title="%s"',$node->title);
        while($n = db_fetch_object($nodes)){
          if($n->nid != $node->nid){
            form_set_error('title',t('Product category with name \'' . $node->title . '\' already exist.'));
          }
        }
      }
      
      if($node->type=='product'){
        $nodes = db_query('select nid from {node} where type="product" and title="%s"',$node->title);
        while($n = db_fetch_object($nodes)){
          if($n->nid != $node->nid){
            form_set_error('title',t('Product with name \'' . $node->title . '\' already exist.'));
          }
        }
        $nid = $node->nid;
        $db_node = node_load($nid);
        if(!$db_node->nid){
            
            $category = $node->field_product_categories[0]['value'];
            if($a3['#post']['op'] == 'Save'){
            
                $query = 'select count(n.nid) as count from {node} n
                Inner join {content_type_product} cp on n.nid=cp.nid where n.status=1 and  cp.field_product_categories_value =' . $category;
                $result = db_query($query);
                $obj = db_fetch_object($result);

                if(intval($obj->count) >= 3){
                    drupal_set_message('Category cannot contain more than 3 products');
                    form_set_error('title',t('Production creation failed'));
                }
            }
        }
      }
      if($node->type=='hotspot'){
        if($node->field_resuse_existing_hotspot[0][value] !== 'Yes' && !$node->field_hotspot_media_url[0][value] && !$node->field_hotspot_media[0]['filepath'] && !$node->field_hotspot_media[0]['filename'] && !$node->field_hotspot_media[0]['field'] && $node->field_hotspot_media[0]['fid']===0){
          form_set_error('Media',t('Upload Media file or just enter its URL.'));
        }        
      }
    break;
   
    
    case 'insert':
      
      if ($node->type == 'hotspot') {
        if($node->field_resuse_existing_hotspot[0][value] == 'Yes'){
          if($node->field_existing_hotspots[0][value]){
            reuse_existing_hotspot_information($node->field_existing_hotspots[0][value],$node);
          }
        }
      }
      
     break;

  }
}

function resizeImage($source,$nid,$type,$width,$height){
  if ($source) {
    $extension = getFileExtension($source);
    $time = time();
    save_file_name($nid, $type, $type . '_' . $nid . '_' . $time . '.' . $extension);
    image_resize($source, 'sites/default/files/resized_images/iPhone/' . $type . '_' . $nid . '_' . $time . '.' . $extension, $width / 2, $height / 2);
    image_resize($source, 'sites/default/files/resized_images/iPhone4/' . $type . '_' . $nid . '_' . $time . '.' . $extension, $width, $height);
    if (file_exists('sites/default/files/resized_images/iPhone/' . $type . '_' . $nid . '_' . $time . '.' . $extension)) {
      chmod('sites/default/files/resized_images/iPhone/' . $type . '_' . $nid . '_' . $time . '.' . $extension, 0777);
    }
    if (file_exists('sites/default/files/resized_images/iPhone4/' . $type . '_' . $nid . '_' . $time . '.' . $extension)) {
      chmod('sites/default/files/resized_images/iPhone4/' . $type . '_' . $nid . '_' . $time . '.' . $extension, 0777);
    }
  }
}

function resizeImageToThumb($images,$nid,$type,$width,$height,$crop=FALSE){
  $time = time();
  if (is_array($images)) {
    foreach ($images as $image) {
      $source = $image[filepath];
      if ($source) {
        $extension = getFileExtension($source);
        save_file_name($nid, $type, $type . '_' . $nid . '_' . $time . '.' . $extension, 'insert');
        if(!$crop){
          image_resize($source, 'sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension, $width, $height);
        }
        else{
          image_scale_and_crop($source, 'sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension, $width, $height);
        }
        if (file_exists('sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension)) {
          chmod('sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension, 0777);
        }
        $time++;
      }
    }
  }
  else {
    $source = $images;
    if ($source) {
      $extension = getFileExtension($source);
      save_file_name($nid, $type, $type . '_' . $nid . '_' . $time . '.' . $extension);
      image_resize($source, 'sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension, $width, $height);
      if (file_exists('sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension)) {
        chmod('sites/default/files/resized_images/thumbs/' . $type . '_' . $nid . '_' . $time . '.' . $extension, 0777);
      }
    }
  }
}

function deleteResizedImages($nid,$type){
  file_delete('sites/default/files/resized_images/iPhone4/'.get_file_name($nid,$type));
  file_delete('sites/default/files/resized_images/iPhone/'.get_file_name($nid,$type));
}

function deleteResizedProductThumb($nid,$type){
  file_delete('sites/default/files/resized_images/thumbs/'.get_file_name($nid,$type));
}

function deleteResizedThumbs($nid,$type){
  $filenames = get_thumb_names($nid,$type);
  foreach ($filenames as $filename) {
    file_delete('sites/default/files/resized_images/thumbs/'.$filename);
  }
}

function getFileExtension($filepath) {
  preg_match('/[^?]*/', $filepath, $matches);
  $string = $matches[0];

  $pattern = preg_split('/\./', $string, -1, PREG_SPLIT_OFFSET_CAPTURE);

  if (count($pattern) == 1) {    
    return 'jpg';
  }
  if (count($pattern) > 1) {
    $filenamepart = $pattern[count($pattern) - 1][0];
    preg_match('/[^?]*/', $filenamepart, $matches);
    return $matches[0];
  }
}

function save_file_name($nid,$type,$file_name,$mode=''){
  $result = db_fetch_object(db_query('select count(*) as count from {amana_resized_files} where nid=%d and type="%s"',$nid,$type));
  if($result->count >0 && $mode==''){
    db_query('Update {amana_resized_files} set filepath="%s" where nid=%d and type="%s" ',$file_name,$nid,$type);
  }
  else{
    db_query('insert INTO {amana_resized_files} (nid,type,filepath) VALUES (%d,"%s","%s")',$nid,$type,$file_name);
  }
}

function get_file_name($nid,$type){
  $result = db_query('select nid,filepath from {amana_resized_files} where nid=%d and type="%s" ',$nid,$type);
  while($obj = db_fetch_object($result)){
    return $obj->filepath;
  }  
  return '';
}

function get_thumb_names($nid,$type,$delete_mode=TRUE){
  $filenames = array();
  $i=0;
  $result = db_query('select nid,filepath from {amana_resized_files} where nid=%d and type="%s" order by filepath',$nid,$type);
  while($obj = db_fetch_object($result)){
    $filenames[$i] = $obj->filepath;
    $i++;
  }
  if($delete_mode){
    db_query('delete from {amana_resized_files} where nid=%d and type="%s" ',$nid,$type);
  }
  return $filenames;
}

function reuse_existing_hotspot_information($existing_node_id, $current_node) {
  global $user;

  $existing_node = node_load($existing_node_id);
  $mime = file_get_mimetype($existing_node->field_hotspot_media[0]['filename']);

  $source = $existing_node->field_hotspot_media[0]['filepath'];
  $file_drupal_path = existing_node_file_copy($source, $source, FILE_EXISTS_RENAME);
  if ($file_drupal_path) {
    $file = new stdClass();
    $file->filename = basename($file_drupal_path);
    $file->filepath = $file_drupal_path;
    $file->filemime = $mime;
    $file->filesize = filesize($file_drupal_path);

    $file->uid = $user->uid;
    $file->status = FILE_STATUS_PERMANENT;
    $file->timestamp = time();
    drupal_write_record('files', $file);
    $current_node->field_hotspot_media = array(
        array(
            'fid' => $file->fid,
            'title' => basename($file->filename),
            'filename' => $file->filename,
            'filepath' => $file->filepath,
            'filesize' => $file->filesize,
            'mimetype' => $mime,
            'description' => basename($file->filename),
            'list' => 1,
        ),
    );
  }
  
  $current_node->title = $existing_node->title;
  $current_node->body = $existing_node->body;
  $current_node->field_hotspot_media_dropdown = $existing_node->field_hotspot_media_dropdown;
  $current_node->field_hotspot_media_url = $existing_node->field_hotspot_media_url;
  $current_node->field_related_product_url = $existing_node->field_related_product_url;
  $current_node->field_email_subject = $existing_node->field_email_subject;
  $current_node->field_sms_email_body = $existing_node->field_sms_email_body;
  $current_node->field_hotspot_media_url = $existing_node->field_hotspot_media_url;
  
  node_save($current_node);
}

function existing_node_file_copy(&$source, $dest = 0, $replace = FILE_EXISTS_RENAME) {
  $dest = file_create_path($dest);

  $directory = $dest;
  $basename = file_check_path($directory);

  // Make sure we at least have a valid directory.
  if ($basename === FALSE) {
    $source = is_object($source) ? $source->filepath : $source;
    drupal_set_message(t('The selected file %file could not be uploaded, because the destination %directory is not properly configured.', array('%file' => $source, '%directory' => $dest)), 'error');
    watchdog('file system', 'The selected file %file could not be uploaded, because the destination %directory could not be found, or because its permissions do not allow the file to be written.', array('%file' => $source, '%directory' => $dest), WATCHDOG_ERROR);
    return 0;
  }

  // Process a file upload object.
  if (is_object($source)) {
    $file = $source;
    $source = $file->filepath;
    if (!$basename) {
      $basename = $file->filename;
    }
  }

  $source = realpath($source);
  if (!file_exists($source)) {
    drupal_set_message(t('The selected file %file could not be copied, because no file by that name exists. Please check that you supplied the correct filename.', array('%file' => $source)), 'error');
    return 0;
  }

  // If the destination file is not specified then use the filename of the source file.
  $basename = $basename ? $basename : basename($source);
  $dest = $directory . '/' . $basename;

  // Make sure source and destination filenames are not the same, makes no sense
  // to copy it if they are. In fact copying the file will most likely result in
  // a 0 byte file. Which is bad. Real bad.
  //if ($source != realpath($dest)) {
    if (!$dest = file_destination($dest, $replace)) {
      drupal_set_message(t('The selected file %file could not be copied, because a file by that name already exists in the destination.', array('%file' => $source)), 'error');
      return FALSE;
    }

    if (!@copy($source, $dest)) {
      drupal_set_message(t('The selected file %file could not be copied.', array('%file' => $source)), 'error');
      return 0;
    }

    // Give everyone read access so that FTP'd users or
    // non-webserver users can see/read these files,
    // and give group write permissions so group members
    // can alter files uploaded by the webserver.
    @chmod($dest, 0664);
  //}

  if (isset($file) && is_object($file)) {
    $file->filename = $basename;
    $file->filepath = $dest;
    $source = $file;
  }
  else {
    $source = $dest;
  }

  return $dest; // Everything went ok.
}